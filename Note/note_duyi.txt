路线： h5+css3、es6、网络、第三方库、工程化、vue

************** Day01 **************
    浏览器 是一个 多进程 多线程的应用程序。它启动时，会 自动 启动多个进程
        浏览器进程：
            主要负责 界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务
        网络进程：
            负责加载网络资源。网络进程启动多个线程 处理不同的网络任务
        渲染进程：每个标签页 都是 一个 渲染进程（包含 渲染主线程，合成线程 。。。）
            渲染进程启动后，会开启一个渲染主进程，主线程 负责执行 HTML、CSS、JS 代码
            它主要处理的任务包括但不限于
                解析 HTML、CSS
                计算样式
                布局
                处理图层
                每秒把页面 画 60次
                执行全局 JS 代码
                执行事件 处理函数
                执行计时器的回调函数
                。。。。。。

        消息循环：
        1. 在最开始的时候，渲染主线程 会进入一个无限 循环
        2. 每次循环 会检查 消息队列中是否又任务存在，如果有，就去除一个任务执行，执行完一个后进入下一次循环；如果 没有，，则进入休眠状态
        3. 其他素有线程（包括其他进程的线程）可以随时想这消息队列中添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程时休眠状态，则会将其唤醒以继续魂环拿取任务

        异步：
        代码在执行过程中，会遇到一些无法立即处理的任务，比如：
            计时完成后需要执行的任务  -- setTimeout、setInterval
            网络通信完成后需要执行的任务  -- XHR、Fetch
            用户操作后需要执行的任务  -- addEventListener

        任务队列优先级：
            任务没有优先级，在消息队列中 先进先出。但消息队列有优先级
        根据W3C解释：
            每个任务都有一个任务类型，同意个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行
            浏览器必须准备好一个微队列，微队列中的任务优先 所有其他任务执行
        随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法
        在目前 chrome 的实现中，至少包含了 下面的队列：
            延时队列：用于存放计时器达到后的回调任务，优先级【中】
            交互队列：用于存放用户操作后产生的事件处理任务，优先级【高】
            微队列：用户存放需要最快执行的任务，优先级【最高】

        添加任务到微队列的主要方式时使用：Promise、MutationObserver
            // 立即把一个函数添加到微队列
            Promise.resolve().then(函数)
        
        执行顺序：
            全局 JS 代码  -->  微队列  -->  交互队列  -->  延时队列


************** Day02 **************
    浏览器渲染原理：
    浏览器时如何渲染页面的：
        当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列
        在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。
        整个渲染流程分为多个阶段，分别是：HTML解析、样式计算、布局、分层、绘制、分块、光栅化、画
        每个阶段都有名曲的输入输出，上一个阶段的输出会是下个阶段的输入

    1. 渲染的第一步：解析 HTML
        解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS文件 和 外部JS文件
        如果主线程解析到 link 位置，此时外部的 CSS文件还没有 下载解析好，主线程不会等待，会 继续解析后面的HTML。这是因为 下载和解析 CSS 的工作是在 预解析线程中
        进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因
        如果主线程 解析到 script 位置，会停止解析 HTML，转而 等待 JS 文件下载好，并将 全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会
        修改当前 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因
        第一步完成后，会得到 DOM树 和 CSSOM树，浏览器的默认样式、内部样式、外部样式、行内样式 均会包含在 CSSDOM 树中。

*** 要 CSS样式属性值计算 资料
    2. 渲染的下一步是样式计算：
        主线程 会遍历得到 DOM 树，一次为树中的每个节点计算出它最终的样式，称之为 Computed Style。
        在这一过程中，很多预设值会变成绝对值，比如 red 会变成 rgb(255,0,0)；相对单位 会变成 绝对单位，比如 em 会变成 px
        这一步完成后，会得到 一个 带有样式的 DOM 树中。

*** 要 包含块 资料
    3. 接下来是 布局，布局完成后会得到 布局树。
        布局阶段会一次遍历 DOM 树的每个节点，计算每个节点的几何信息。例如节点的 宽高、相对包含块的位置。
        大部分时候，DOM树 和 布局树 并非 一 一对应
        比如 display:none 的节点没有几何信息，因此不会生成到布局树；又比如 使用了 伪元素 选择器，虽然 DOM树 中不存在这些 伪元素节点，但是他们拥有几何信息，所以会生成到
        布局树中。还有匿名行盒、匿名块盒 等 都会导致 DOM树 和 布局树 无法 一 一对应
    
    4. 下一步是分层：
        主线程会使用一套复杂的策略 对整个布局树中 进行分层。
        分层的好处在于，将来某一层改变后，仅会对该层进行后续处理，从而提升效率
        滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过 will-change 属性 更大程度的影响分层结果。
    
    5. 再下一步是绘制：渲染主线程 将 绘制信息 提交给 合成线程了，后续的操作 由 合成线程进行，渲染主线程就 暂时 完事了
        主线程 会 为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来
        完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成
        合成线程首先对每个图层进行分块，将其划分为更多的小区域
        他会从线程池中拿取多少个线程来完成分块工作
    
    6. 分块完成后，进入光栅化阶段
        合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化
        GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块
        光栅化的结果，就是 一块一块的位图

    7. 最后一个阶段 就是  画  了
        合成线程拿到每个层、每个块的位图后，生成一个个【指引（quad）】信息
        指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到 旋转、缩放 等 变形
        变形发生再 合成线程，与 渲染主线程无关，这就是 transform 效率高的本质原因
        合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像

    8. 完整过程
        渲染线程：parse  -->  style  -->  layout  -->  layer  -->  paint
        合成线程：                                                        -->  tiling  -->  raster  -->  draw
        GPU进程：                                                                                              -->  计算结果成像

    什么是 reflow
        reflow 的本质就是重新计算 layout树
        当进行了会影响布局树的操作后，需要重新计算布局树，会引发 laytou
        为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的
        也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。
        浏览器再反复权衡下，最终决定获取属性 立即 reflow
        设置几何信息不会导致立即 reflow，但是 读取几何信息会 导致 立即 reflow

    什么是 repaint
        repaint 的本质就是 重新根据分层信息 计算了绘制指令
        当改动了 可见样式后，就需要重新计算，会引发 repaint
        由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint

    为什么 transform 的效率高
        因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个【draw】阶段
        由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化




    



