CONTAINER ID   IMAGE           COMMAND                  CREATED        STATUS                      PORTS               
866e3f1dcd58   redis:5.0.14    "docker-entrypoint.s…"   2 hours ago    Up About a minute           0.0.0.0:26379->6379/
308431c4a6aa   node:16.19.0    "docker-entrypoint.s…"   13 hours ago   Exited (0) 31 minutes ago                       
ff22af51669a   node:16.19.0    "docker-entrypoint.s…"   14 hours ago   Exited (0) 14 hours ago                         
682f8bf95e88   php:7.3.4-fpm   "docker-php-entrypoi…"   20 hours ago   Exited (0) 12 minutes ago                       
f932f1bca363   nginx:1.15.11   "nginx -g 'daemon of…"   21 hours ago   Exited (0) 12 minutes ago                       
881df6169f41   mysql:5.7.26    "docker-entrypoint.s…"   39 hours ago   Exited (0) 12 minutes ago                       

docker start 881df6169f41 && docker start 866e3f1dcd58 && docker start f932f1bca363 && docker start 682f8bf95e88


// 修改 root 密码，目前 修改为了：Qwer1234.
sudo passwd root

// 腾讯云 使用 root 登录 ubuntu
    1. 使用具有 sudo 权限的用户登录后，执行以下命令以获取 root 权限
        sudo -i
            sudo -i是Linux终端命令下改变用户对命令使用权限的命令。
            在使用ubuntu系统时，刚安装的Ubuntu系统无法登陆到root用户，可以使用sudo - i命令进入root用户下使用passwd改变root用户密码。
    2. 如果你需要通过 SSH 使用 root 用户登录，你需要先为 root 用户设置密码：
        sudo passwd root
    3. 修改 SSH 配置文件 /etc/ssh/sshd_config，找到 PermitRootLogin 选项，并将其修改为 yes ：
        vim /etc/ssh/sshd_config
        找到 “PermitRootLogin”，将其 修改为 “PermitRootLogin yes”
    4. 重启 SSH 服务以应用更改：
        sudo service ssh restart


// 查看 linux 内核版本
uname -a
    Linux VM-24-11-ubuntu 5.4.0-171-generic #189-Ubuntu SMP Fri Jan 5 14:23:02 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux

// 查看 ubuntu 版本
cat /proc/version
    Linux version 5.4.0-171-generic (buildd@lcy02-amd64-005) (gcc version 9.4.0 (Ubuntu 9.4.0-1ubuntu1~20.04.2)) #189-Ubuntu SMP Fri Jan 5 14:23:02 UTC 2024

ls 命令：
    列出当前文件夹中以字母"a"开头的所有文件和文件夹：
        ls a*
    列出当前文件夹中以数字"1"开头的所有文件和文件夹：
        ls 1*
    列出指定文件夹（例如/home/user/Documents）中以字母"a"开头的所有文件和文件夹：
        ls /home/user/Documents/a*
    列出当前文件夹中以字母"a"或"b"开头的所有文件和文件夹：
        ls [ab]*
    ls命令区分大小写，因此它会分别显示以大写和小写字母开头的文件和文件夹。如果你希望不区分大小写，可以使用ls命令的-i选项，它会在输出中忽略大小写。
        ls -i a*

docker run \ 
    -itd \
    --name ${container_name} \
    --privileged=true \
    --net mynet \
    --ip ${IP} \
    --restart=always \
    -v /ky_volume:/ky_workspace  ${image_name}:${image_tag}  /usr/sbin/init

// 进入 docker 容器
docker exec -it 容器名|容器ID /bin/bash

// 查看 当前  docker 里所有的 容器的详细信息
    docker ps -a --no-trunc
    docker inspect 容器ID
    docker inspect -f '{{.Config.Image}}' 容器ID
// 查看容器 IP 信息
    docker inspect 容器ID | grep "IPAddress"
// 重启容器
    docker restart 容器ID
// 实时地跟踪容器的标准输出，可以使用-f或--follow选项
    docker logs -f <container_id_or_name>

docker查看容器进程命令
    docker ps
        命令可以查看所有正在运行的容器进程，包括容器的ID、名称、状态、启动时间等信息。
    docker top <容器ID或名称>
        命令可以查看指定容器的进程列表，包括进程ID、用户、CPU使用率、内存使用量等信息。
    docker exec <容器ID或名称> ps
        命令可以在指定容器内部执行ps命令，查看容器内部的进程列表。
    docker stats <容器ID或名称>
        命令可以实时监控指定容器的资源使用情况，包括CPU、内存、网络等指标，也可以通过-d参数将监控结果导出为CSV格式。
    docker inspect <容器ID或名称>
        命令可以查看指定容器的详细信息，包括进程、网络、卷挂载等配置内容，通过过滤器可以提取出进程相关的信息。
    docker top
        命令可以查看所有容器的进程列表，类似于Linux的top命令，可以按照CPU、内存等指标进行排序和过滤。

    注意：以上命令均需在Docker主机上执行。


rm -r --exclude-dir=folder1 --exclude-dir=folder2 /path/to/directory/*
    删除文件 排除哪些文件
    
解压缩：
unzip -o xyzwweb.zip -d ./xyzwweb01
    -d [目标目录]：指定解压到的目标目录，默认为当前目录。
    -o：覆盖已存在的文件。
    -q：静默模式，不显示解压过程。
    -j：仅解压文件，不包括目录结构
tar -zxvf 文件名.tgz -C /指定路径
tar -xvf tardir.tar
tar -zxvf tardir.tar.gz
tar -jxvf tardir.tar.bz2


压缩：
    压缩 zipDir 目录时，不压缩 /tmp/zipDir/file3
        zip -9r /tmp/zipDirWithoutFile3.zip  /tmp/zipDir    -x "/tmp/zipDir/file3"
    普通压缩：
        tar -cvf  /tmp/tardir.tar /tmp/tarDir/
    调用gzip压缩，添加一个-z即可：
        tar -zcvf tardir.tar.gz tardir.tar
        tar -czvf folder.tgz /path/to/folder
        tar -czvf DOCKER-WEB.tgz ./DOCKER-WEB
    调用bz2压缩
        tar -jcvf tardir.tar.bz2 tardir.tar


tree -L 3 -I "node_modules"
    tree -d 只显示文件夹；
    tree -L n 显示项目的层级。n表示层级数。比如想要显示项目三层结构，可以用tree -l 3；
    tree -I pattern 用于过滤不想要显示的文件或者文件夹。比如你想要过滤项目中的node_modules文件夹，可以使用tree -I "node_modules"；
    tree > tree.md 将项目结构输出到tree.md这个文件

重启 nginx 服务
    service nginx reload


mysql数据库备份与还原
mysqldump -h 127.0.0.1 -u root -p xyzwinvite > xyzwinvite240328001.sql

// 查看文件夹大小
du . -h --max-depth=1


debian 安装 docker-compose
    下载地址：https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64
    curl -SL https://github.com/docker/compose/releases/download/v2.29.7/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose

debian 安装 boost库 和 openSSL库
参数解释
toolset：指定编译器，可选的如msvc-14.3，msvc-14.1msvc-14.0, gcc等，上一步因为我们是在 cmd for VS 2022 的环境中执行的，不需要额外指定此参数。
stage/install：stage表示只生成库（dll和lib），install会生成并安装到系统中，包含头文件的include目录和CMake文件夹。
stagedir/prefix：stage时使用stagedir，install时使用prefix，表示编译生成文件的路径，与安装路径。
link：生成动态链接库/静态链接库。生成动态链接库需使用shared方式，生成静态链接库需使用static方式。
runtime-link：动态/静态链接运行时库。同样有shared和static两种方式，标记如何连接C++运行库，是包含就用静态，使用系统运行库就用动态。
architecture：表示架构，也就是你的CPU架构，所以是x86或者arm。
address-model：地址长度，32表示编译32位的库文件，64表示编译64位的库文件。
threading：单/多线程编译，single或multi。
variant：编译debug/release版本。一般都是程序的debug版本对应库的debug版本，所以两个都编译。

tar -zxvf boost_1_82_0.tar.gz

mkdir ..\boost_1.83.0_build #创建目录用于保存编译生成的文件，这里为boost_1.83.0_build
mkdir ..\boost_1.83.0_sdk #再次创建目录用于安装，这里为boost_1.83.0_sdk
b2 toolset=msvc-14.2 --build-type=complete architecture=x86 address-model=64 variant=debug,release --build-dir="..\boost_1.83.0_build" link=static runtime-link=shared threading=multi install --prefix="..\boost_1.83.0_sdk"

./b2 --prefix=/usr/local/boost_1_80_0 install
/usr/local/boost_1_80_0
b2.exe install --build-type=complete architecture=x86 address-model=64 --build-dir="/home/xmn/boostWss/boost_1_80_0/build_tmp" --prefix="/usr/local/lib/boost_1_80_0" link=shared runtime-link=shared threading=multi variant=release

b2.exe install --toolset=msvc-14.3 --build-type=complete architecture=x86 address-model=64 --build-dir="E:/TOOLS/boost_1_86_0/temp_build" --prefix="D:/boost_1_86_0_VC143" link=shared runtime-link=shared threading=multi variant=debug,release
b2.exe install --toolset=msvc-14.3 --build-type=complete --build-dir="E:/TOOLS/boost_1_86_0/temp_build" --prefix="D:/boost_1_86_0_VC143" link=shared runtime-link=shared runtime-link=static threading=multi debug release
b2.exe install --prefix="E:/Boost/x64" --build-type=complete --toolset=msvc-14.3 threading=multi --build-type=complete address-model=64
b2.exe install --prefix="E:/Boost/x86" --build-type=complete --toolset=msvc-14.3 threading=multi --build-type=complete address-model=32

g++ -I /usr/local/boost_1_80_0/include -L /usr/local/boost_1_80_0/lib testBoost.cpp -o testBoost

D:\OpenSSL_3_4_0

perl Configure VC-WIN64A --prefix=D:\OpenSSL_3_4_0
perl Configure VC-WIN64A --prefix=D:\OpenSSL_3_4_0

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  debian
apt install zlib1g-dev -y
apt install mpi-default-dev libicu-dev libbz2-dev -y
wget https://sourceforge.net/projects/boost/files/boost/1.86.0/boost_1_86_0.tar.gz/download  -O boost_1_86_0.tar.gz
tar -zxvf boost_1_86_0.tar.gz
cd boost_1_86_0
./bootstrap.sh
./b2
./b2 --prefix=/usr/local/boost_1_86_0 install
export CPLUS_INCLUDE_PATH=/usr/local/boost_1_86_0/include
export LIBRARY_PATH=/usr/local/boost_1_86_0/lib

vim boost_1_86_0.cpp
#include <boost/date_time/gregorian/gregorian.hpp> 
#include <iostream> 
int main() 
{ 
    boost::gregorian::date d(boost::gregorian::day_clock::local_day());
    std::cout << d.year() << d.month() <<d.day() << std::endl; 
}
g++ -I /usr/local/boost_1_86_0/include -L /usr/local/boost_1_86_0/lib boost_1_86_0.cpp -o boost_1_86_0


wget https://www.openssl.org/source/openssl-3.4.0.tar.gz
tar -zxvf openssl-3.4.0.tar.gz
cd openssl-3.4.0

mkdir /usr/local/openssl-3.4.0
./Configure --prefix=/usr/local/openssl-3.4.0 --openssldir=/usr/local/openssl-3.4.0 shared zlib

make
make install
sh -c "echo '/usr/local/openssl-3.4.0/lib64' >> /etc/ld.so.conf.d/openssl-3.4.0.conf"
ldconfig -v

/usr/local/openssl-3.4.0/bin/openssl version

/usr/local/openssl-3.4.0/include
/usr/local/openssl-3.4.0/lib64

export CPLUS_INCLUDE_PATH=/usr/local/openssl-3.4.0/include
export LIBRARY_PATH=/usr/local/openssl-3.4.0/lib64

-L/usr/local/openssl-3.4.0/lib64 -lssl -lcrypto

g++ wss_test2.cpp -I /usr/local/boost_1_86_0/include -L /usr/local/boost_1_86_0/lib -I /usr/local/openssl-3.4.0/include -L /usr/local/openssl-3.4.0/lib64 -lssl -lcrypto -lz -o aa
g++ wss_test3.cpp -I /usr/local/boost_1_86_0/include -L /usr/local/boost_1_86_0/lib -I /usr/local/openssl-3.4.0/include -L /usr/local/openssl-3.4.0/lib64 -lssl -lcrypto -lz -o bb
g++ wss_test04.cpp -I /usr/local/boost_1_86_0/include -L /usr/local/boost_1_86_0/lib -I /usr/local/openssl-3.4.0/include -L /usr/local/openssl-3.4.0/lib64 -lssl -lcrypto -lz -o aa


